const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function initFeatureFlags() {
  console.log('üöÄ Inicializando feature flags del sistema de seguros...\n')

  try {
    const featureFlags = [
      {
        name: 'insurance_system',
        isEnabled: false,
        description: 'Sistema de seguros m√©dicos con c√°lculo autom√°tico de cobertura'
      },
      {
        name: 'insurance_billing',
        isEnabled: false,
        description: 'Integraci√≥n de seguros en facturaci√≥n'
      },
      {
        name: 'insurance_pdf',
        isEnabled: false,
        description: 'Inclusi√≥n de informaci√≥n de seguros en PDFs'
      }
    ]

    for (const flag of featureFlags) {
      const existingFlag = await prisma.featureFlag.findUnique({
        where: { name: flag.name }
      })

      if (existingFlag) {
        console.log(`‚ö†Ô∏è Feature flag '${flag.name}' ya existe`)
      } else {
        await prisma.featureFlag.create({
          data: flag
        })
        console.log(`‚úÖ Feature flag '${flag.name}' creado`)
      }
    }

    console.log('\nüéâ Feature flags inicializados correctamente!')
    console.log('\nüìã Para activar el sistema de seguros:')
    console.log('   1. Ve a Configuraci√≥n del Sistema')
    console.log('   2. Activa "Sistema de Seguros"')
    console.log('   3. Activa "Facturaci√≥n con Seguros"')
    console.log('   4. Activa "PDFs con Seguros" (opcional)')
    console.log('   5. Configura seguros en Gesti√≥n de Seguros')

  } catch (error) {
    console.error('‚ùå Error al inicializar feature flags:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar la inicializaci√≥n
initFeatureFlags()
