#!/usr/bin/env node

/**
 * Script de prueba del proceso de inicializaci√≥n
 * Simula lo que har√≠a railway-init.sh
 */

const { PrismaClient } = require('@prisma/client');

async function testInitProcess() {
  console.log('üöÄ Iniciando configuraci√≥n de Railway...');
  
  // Verificar variables de entorno
  console.log('üîç Verificando variables de entorno...');
  console.log('DATABASE_URL:', process.env.DATABASE_URL ? 'Configurada' : 'No configurada');
  console.log('DATABASE_PUBLIC_URL:', process.env.DATABASE_PUBLIC_URL ? 'Configurada' : 'No configurada');
  console.log('INITIAL_ADMIN_EMAIL:', process.env.INITIAL_ADMIN_EMAIL || 'No configurada');
  console.log('INITIAL_ADMIN_PASSWORD:', process.env.INITIAL_ADMIN_PASSWORD ? 'Configurada' : 'No configurada');
  
  // SOLUCI√ìN CR√çTICA: Usar DATABASE_PUBLIC_URL si est√° disponible
  let databaseUrl = process.env.DATABASE_PUBLIC_URL || process.env.DATABASE_URL;
  if (!databaseUrl) {
    console.log('‚ùå No hay URL de base de datos configurada');
    return false;
  }
  
  if (process.env.DATABASE_PUBLIC_URL) {
    console.log('‚úÖ Usando DATABASE_PUBLIC_URL (recomendado para Railway)');
  } else {
    console.log('‚ö†Ô∏è  Usando DATABASE_URL (puede fallar en Railway)');
  }
  
  let prisma;
  
  try {
    // Crear cliente Prisma con la URL correcta
    prisma = new PrismaClient({
      datasources: {
        db: {
          url: databaseUrl
        }
      }
    });
    
    // Verificar conexi√≥n
    console.log('üìä Verificando conexi√≥n a base de datos...');
    await prisma.$queryRaw`SELECT 1`;
    console.log('‚úÖ Conexi√≥n a base de datos exitosa');
    
    // Verificar si las tablas existen
    console.log('üìä Verificando tablas existentes...');
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' AND table_name NOT LIKE '_prisma_%'
    `;
    
    const expectedTables = ['users', 'patients', 'services', 'invoices'];
    const existingTables = tables.map(t => t.table_name);
    const missingTables = expectedTables.filter(table => !existingTables.includes(table));
    
    if (missingTables.length > 0) {
      console.log('‚ùå Tablas faltantes:', missingTables.join(', '));
      console.log('üîß Las tablas se crear√≠an autom√°ticamente en un despliegue real');
    } else {
      console.log('‚úÖ Todas las tablas principales existen');
    }
    
    // Verificar admin
    if (process.env.INITIAL_ADMIN_EMAIL && process.env.INITIAL_ADMIN_PASSWORD) {
      console.log('üë§ Verificando administrador...');
      const adminCount = await prisma.user.count({
        where: { role: 'ADMIN' }
      });
      
      if (adminCount > 0) {
        console.log(`‚úÖ ${adminCount} administrador(es) encontrado(s)`);
      } else {
        console.log('‚ö†Ô∏è  No hay administradores - se crear√≠an autom√°ticamente en un despliegue real');
      }
    } else {
      console.log('‚ö†Ô∏è  Variables de admin no configuradas - saltando creaci√≥n de admin');
    }
    
    console.log('üéâ ¬°Proceso de inicializaci√≥n simulado exitosamente!');
    console.log('‚úÖ En un despliegue real, las migraciones y admin se crear√≠an autom√°ticamente');
    
    return true;
    
  } catch (error) {
    console.log('‚ùå Error durante la verificaci√≥n:', error.message);
    return false;
  } finally {
    if (prisma) {
      await prisma.$disconnect();
    }
  }
}

// Ejecutar prueba
testInitProcess()
  .then(success => {
    if (success) {
      console.log('\nüéØ CONCLUSI√ìN: El proceso de inicializaci√≥n funcionar√≠a correctamente');
      console.log('‚úÖ Las migraciones se aplicar√≠an autom√°ticamente');
      console.log('‚úÖ Las tablas se crear√≠an autom√°ticamente');
      console.log('‚úÖ El admin se crear√≠a autom√°ticamente');
      console.log('‚úÖ La aplicaci√≥n iniciar√≠a sin problemas');
    } else {
      console.log('\n‚ùå CONCLUSI√ìN: Hay problemas que necesitan resolverse');
    }
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('‚ùå Error cr√≠tico:', error);
    process.exit(1);
  });
