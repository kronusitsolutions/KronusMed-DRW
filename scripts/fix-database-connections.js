#!/usr/bin/env node

/**
 * Script para diagnosticar y solucionar problemas de conexiones de base de datos
 * Ejecutar cuando el servidor falle despu√©s de agregar muchos servicios
 */

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL,
    },
  },
  log: ['query', 'error', 'warn'],
})

async function fixDatabaseConnections() {
  try {
    console.log('üîß Diagnosticando problemas de conexiones de base de datos...\n')
    
    // 1. Verificar conexi√≥n b√°sica
    console.log('1. Probando conexi√≥n b√°sica...')
    await prisma.$queryRaw`SELECT 1`
    console.log('‚úÖ Conexi√≥n b√°sica OK\n')
    
    // 2. Verificar n√∫mero de servicios
    console.log('2. Contando servicios...')
    const serviceCount = await prisma.service.count()
    console.log(`üìä Total de servicios: ${serviceCount}\n`)
    
    // 3. Verificar conexiones activas
    console.log('3. Verificando conexiones activas...')
    try {
      const activeConnections = await prisma.$queryRaw`
        SELECT count(*) as active_connections 
        FROM pg_stat_activity 
        WHERE state = 'active'
      `
      console.log(`üîó Conexiones activas: ${activeConnections[0].active_connections}\n`)
    } catch (error) {
      console.log('‚ö†Ô∏è No se pudo obtener informaci√≥n de conexiones activas\n')
    }
    
    // 4. Limpiar conexiones inactivas
    console.log('4. Limpiando conexiones inactivas...')
    try {
      await prisma.$queryRaw`
        SELECT pg_terminate_backend(pid) 
        FROM pg_stat_activity 
        WHERE state = 'idle' 
        AND state_change < now() - interval '5 minutes'
      `
      console.log('‚úÖ Conexiones inactivas limpiadas\n')
    } catch (error) {
      console.log('‚ö†Ô∏è No se pudieron limpiar conexiones inactivas\n')
    }
    
    // 5. Verificar estado de la base de datos
    console.log('5. Verificando estado de la base de datos...')
    const dbStatus = await prisma.$queryRaw`
      SELECT 
        current_database() as database_name,
        current_user as current_user,
        version() as postgres_version
    `
    console.log('üìä Estado de la base de datos:')
    console.log(`   - Base de datos: ${dbStatus[0].database_name}`)
    console.log(`   - Usuario: ${dbStatus[0].current_user}`)
    console.log(`   - PostgreSQL: ${dbStatus[0].postgres_version.split(' ')[0]}\n`)
    
    // 6. Recomendaciones
    console.log('üí° RECOMENDACIONES:')
    console.log('   1. El problema es probablemente el l√≠mite de conexiones de Railway')
    console.log('   2. Considera actualizar el plan de Railway para m√°s conexiones')
    console.log('   3. Implementa paginaci√≥n en las consultas de servicios')
    console.log('   4. Usa cache para reducir consultas a la base de datos')
    console.log('   5. Considera usar un pool de conexiones m√°s peque√±o\n')
    
    console.log('‚úÖ Diagn√≥stico completado')
    
  } catch (error) {
    console.error('‚ùå Error durante el diagn√≥stico:', error)
    
    if (error.message.includes('connection')) {
      console.log('\nüí° SOLUCI√ìN:')
      console.log('   - El servidor est√° sobrecargado')
      console.log('   - Espera unos minutos y reintenta')
      console.log('   - Considera reiniciar el servidor en Railway')
    }
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  fixDatabaseConnections()
}

module.exports = { fixDatabaseConnections }
