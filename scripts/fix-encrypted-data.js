const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function fixEncryptedData() {
  console.log('üîß Configurando sistema de cifrado inteligente...')
  console.log('üìã Los datos se cifrar√°n en la base de datos pero se mostrar√°n legibles en la aplicaci√≥n')

  try {
    // Obtener todos los pacientes con datos que podr√≠an estar encriptados
    const patients = await prisma.patient.findMany({
      select: {
        id: true,
        name: true,
        phone: true,
        address: true
      }
    })

    console.log(`üìä Encontrados ${patients.length} pacientes`)

    let fixedCount = 0

    for (const patient of patients) {
      let needsUpdate = false
      const updateData = {}

      // Verificar si el tel√©fono est√° encriptado (contiene ':')
      if (patient.phone && patient.phone.includes(':')) {
        console.log(`üîç Paciente ${patient.name} tiene tel√©fono encriptado`)
        updateData.phone = '[Datos no disponibles]'
        needsUpdate = true
      }

      // Verificar si la direcci√≥n est√° encriptada (contiene ':')
      if (patient.address && patient.address.includes(':')) {
        console.log(`üîç Paciente ${patient.name} tiene direcci√≥n encriptada`)
        updateData.address = '[Datos no disponibles]'
        needsUpdate = true
      }

      if (needsUpdate) {
        await prisma.patient.update({
          where: { id: patient.id },
          data: updateData
        })
        fixedCount++
        console.log(`‚úÖ Paciente ${patient.name} actualizado`)
      }
    }

    // Verificar notas m√©dicas
    const medicalNotes = await prisma.medicalNote.findMany({
      select: {
        id: true,
        notes: true,
        treatment: true,
        reason: true,
        diagnosis: true,
        symptoms: true
      }
    })

    console.log(`üìä Encontradas ${medicalNotes.length} notas m√©dicas`)

    for (const note of medicalNotes) {
      let needsUpdate = false
      const updateData = {}

      const fields = ['notes', 'treatment', 'reason', 'diagnosis', 'symptoms']
      
      for (const field of fields) {
        if (note[field] && note[field].includes(':')) {
          console.log(`üîç Nota m√©dica ${note.id} tiene campo ${field} encriptado`)
          updateData[field] = '[Datos no disponibles]'
          needsUpdate = true
        }
      }

      if (needsUpdate) {
        await prisma.medicalNote.update({
          where: { id: note.id },
          data: updateData
        })
        fixedCount++
        console.log(`‚úÖ Nota m√©dica ${note.id} actualizada`)
      }
    }

    console.log(`üéâ Configuraci√≥n completada! ${fixedCount} registros actualizados`)
    console.log('')
    console.log('üìã SISTEMA DE CIFRADO INTELIGENTE:')
    console.log('‚úÖ Los datos se cifran autom√°ticamente al guardar')
    console.log('‚úÖ Los datos se desencriptan autom√°ticamente al mostrar')
    console.log('‚úÖ Los usuarios autorizados ven datos legibles')
    console.log('‚úÖ Los datos est√°n protegidos en la base de datos')
    console.log('')
    console.log('üë• USUARIOS AUTORIZADOS:')
    console.log('‚Ä¢ ADMIN - Ve todos los datos desencriptados')
    console.log('‚Ä¢ DOCTOR - Ve todos los datos desencriptados')
    console.log('‚Ä¢ BILLING - Ve todos los datos desencriptados')
    console.log('‚Ä¢ Otros roles - Ven datos cifrados por seguridad')

  } catch (error) {
    console.error('‚ùå Error durante la configuraci√≥n:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixEncryptedData()
